#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>


#define BUF_SIZE 100

void error_handling(char * message);

void deduplication();
int readInput ();


unsigned char * mesh_arr = 0;
int * datasize = 0;


FILE *ifp;
double * pos_arr = 0;
int size;

//server->client로 조인트 float 값 보낸다
float jointArray[7] = { 0.0 };
float temp[7] = { 0.0 };
bool jointchanged[7] = { false };

int main(int argc, char * argv[]) {
	int loop = 0;

	int serv_sock;
	char message[BUF_SIZE];//받는 용
	int str_len;
	socklen_t clnt_adr_sz;

	unsigned char floatTobyte[28];
	uint8_t * pointer = (uint8_t *)jointArray;

	struct sockaddr_in serv_adr;
	struct sockaddr_in clnt_adr;


	if (argc != 2) {
		printf("Usage : %s <port>\n", argv[0]);
		exit(1);
	}

/*
	if (readInput () != 1) {
			printf("Failed to read input!\n");
	} else {
		printf("Succeded to read input\n");
	}
*/

	serv_sock = socket(PF_INET, SOCK_DGRAM, 0);
	if (serv_sock == -1) {
		error_handling("UDP socket creation error");
	}
	else {
		printf("success to creating UDP socket\n");
	}

	memset(&serv_adr, 0, sizeof(serv_adr));
	serv_adr.sin_family = AF_INET;
	serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
	serv_adr.sin_port = htons(atoi(argv[1]));

	if (bind(serv_sock, (struct sockaddr *)&serv_adr, sizeof(serv_adr)) == -1) {
		error_handling("bind() error");
	}
	else {
		printf("success to binding\n");
	}



	clnt_adr_sz = sizeof(clnt_adr);

	//hello
	str_len = recvfrom(serv_sock, message, BUF_SIZE, 0, (struct sockaddr *)&clnt_adr, &clnt_adr_sz);
	message[str_len] = 0;
	printf("Received from Client: %s\n", message);

	if (sendto(serv_sock, message, str_len, 0, (struct sockaddr *)&clnt_adr, clnt_adr_sz) == -1) {
		error_handling("sendto() error");
	}
	else {
		printf("success to sending message\n");
	}


	//data size
	str_len = recvfrom(serv_sock, message, BUF_SIZE, 0, (struct sockaddr *)&clnt_adr, &clnt_adr_sz);
	message[str_len] = 0;
	
	datasize = (int *)message;
	printf("data size = %d\n", *datasize);

	//mesh_arr = (unsigned char *)malloc(sizeof(unsigned char)*(*datasize));



/*	
	while (loop != (size/7)) {
		//convert double to float
		jointArray[0] = (float)pos_arr[loop*7];
		jointArray[1] = (float)pos_arr[loop*7+1];
		jointArray[2] = (float)pos_arr[loop*7+2];
		jointArray[3] = (float)pos_arr[loop*7+3];
		jointArray[4] = (float)pos_arr[loop*7+4];
		jointArray[5] = (float)pos_arr[loop*7+5];
		jointArray[6] = (float)pos_arr[loop*7+6];

		printf("=================================State %d\n", loop+1);

		for (int i = 0; i<sizeof(jointArray); i++) {//0-27
			floatTobyte[i] = pointer[i];*/
			/*
			if (i % 4 == 0) {
				printf("joint %d\n", i / 4 + 1);
			}
			printf("------------%x\n", pointer[i]);
			*/
		}
/*
		if (sendto(serv_sock, floatTobyte, 28, 0, (struct sockaddr *)&clnt_adr, clnt_adr_sz) == -1) {
			error_handling("sendto() error");
		}

		usleep(1400000);

		loop++;
	}

*/

	close(serv_sock);
	free(pos_arr);

	return 0;
}

void error_handling(char * message) {
	fputs(message, stderr);
	fputc('\n', stderr);
	exit(1);
}

int readInput () {
	int n=0;

	ifp = fopen("/home/glab/hj/src/iiwa_tool-master/iiwa_tool_examples/src/planning_output.txt", "r");
	if(!ifp) {
    printf("Can't open a file\n");
		return -1;
  }

	fscanf(ifp, "%d", &size);
	pos_arr = (double *)malloc(sizeof(double)*size);

	while(!feof(ifp)) {
		fscanf(ifp, "%lf", &pos_arr[n]);
		n++;
	}
/*
	printf("%d\n", size);
	for (int i=0; i<size; i++) {
    printf("%f ", pos_arr[i]);
  }
*/

	fclose(ifp);
	return 1;
}
